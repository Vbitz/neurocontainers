name: Recipes CI

on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Debug mode (only run niimath test)"
        type: boolean
        default: true

jobs:
  build-builder-sif:
    name: Build builder.sif
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Apptainer
        run: |
          set -euxo pipefail
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install -y apptainer

      - name: Install builder tooling
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          # Install this repo as a package to expose sf-* entry points
          pip install -e .

      - name: Build builder SIF
        run: |
          set -euxo pipefail
          # Build via Docker and convert to SIF (avoids requiring host BuildKit)
          sf-build builder --ignore-architectures
          mkdir sifs/
          apptainer build sifs/builder.sif docker-daemon://builder:0.1

      - name: Upload builder SIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: builder-sif
          path: sifs/*.sif

  prepare-matrix:
    name: Discover recipes
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.set-matrix.outputs.recipes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build recipe list (debug or full)
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            # Debug mode: only test niimath
            RECIPES='["niimath"]'
          else
            # Full mode: discover all recipes with build.yaml under recipes/*/
            mapfile -t files < <(find recipes -mindepth 2 -maxdepth 2 -name build.yaml | sort)
            names=()
            for f in "${files[@]}"; do
              # Extract recipe directory name (recipes/<name>/build.yaml)
              n=$(basename "$(dirname "$f")")
              # Skip the builder recipe itself in matrix to avoid recursion
              if [[ "$n" == "builder" ]]; then continue; fi
              names+=("\"$n\"")
            done
            if [[ ${#names[@]} -eq 0 ]]; then
              echo "No recipes found" >&2
              RECIPES='[]'
            else
              # Join the JSON-quoted names with commas to form valid JSON array
              RECIPES="[$(IFS=,; echo "${names[*]}")]"
            fi
          fi
          echo "recipes=$RECIPES" >> "$GITHUB_OUTPUT"

  build-or-test-recipe:
    name: Recipe ${{ matrix.recipe }}
    needs: [prepare-matrix, build-builder-sif]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        recipe: ${{ fromJSON(needs.prepare-matrix.outputs.recipes) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Apptainer
        run: |
          set -euxo pipefail
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install -y apptainer

      - name: Download builder SIF artifact
        uses: actions/download-artifact@v4
        with:
          name: builder-sif
          path: sifs

      - name: List artifacts
        run: ls -la sifs

      - name: Build SIF via builder image (BuildKit inside container)
        env:
          RECIPE: ${{ matrix.recipe }}
        run: |
          set -euxo pipefail
          # Use the builder SIF to run sf-make; bind the repo so it can access recipes
          BUILDER_SIF=$(ls sifs/*.sif | head -n1)
          echo "Using builder SIF: $BUILDER_SIF"
          # Bind current workspace inside the container and execute sf-make against the recipe
          # The builder image clones neurocontainers at build time; we prefer mounting our checkout
          apptainer exec \
            --fakeroot \
            --writable-tmpfs \
            --bind "$PWD:/workspace" \
            "$BUILDER_SIF" \
            bash -lc "cd /workspace && sf-make \"${RECIPE}\" --ignore-architectures"
